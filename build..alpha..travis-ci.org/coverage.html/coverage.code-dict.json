{"/home/travis/build/npmtest/node-npmtest-node-readability/test.js":"/* istanbul instrument in package npmtest_node_readability */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-readability/lib.npmtest_node_readability.js":"/* istanbul instrument in package npmtest_node_readability */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_node_readability = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_node_readability = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-node-readability/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-node-readability && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_node_readability */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_node_readability\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_node_readability.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_node_readability.rollup.js'] =\n            local.assetsDict['/assets.npmtest_node_readability.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_node_readability.__dirname + '/lib.npmtest_node_readability.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-readability/node_modules/node-readability/src/readability.js":"var jsdom = require('jsdom');\nvar request = require('request');\nvar helpers = require('./helpers');\nvar encodinglib = require(\"encoding\");\nvar urllib = require('url');\n\nexports.debug = function(debug) {\n  helpers.debug(debug);\n};\n\nexports.debug(false);\n\nfunction Readability(window, options) {\n  this._window = window;\n  this._document = window.document;\n  this.iframeLoads = 0;\n  // Cache the body HTML in case we need to re-use it later\n  this.bodyCache = null;\n  this._articleContent = '';\n  helpers.setCleanRules(options.cleanRulers || []);\n\n  this.cache = {};\n\n  helpers.prepDocument(this._document);\n  this.cache = {\n    'body': this._document.body.innerHTML\n  };\n\n  this.__defineGetter__('content', function() {\n    return this.getContent(true);\n  });\n  this.__defineGetter__('title', function() {\n    return this.getTitle(true);\n  });\n  this.__defineGetter__('textBody', function() {\n    return this.getTextBody(true);\n  });\n  this.__defineGetter__('html', function() {\n    return this.getHTML(true);\n  });\n  this.__defineGetter__('document', function() {\n    return this.getDocument(true);\n  });\n}\n\nReadability.prototype.close = function() {\n  if (this._window) {\n    this._window.close();\n  }\n  this._window = null;\n  this._document = null;\n};\n\nReadability.prototype.getContent = function(notDeprecated) {\n  if (!notDeprecated) {\n    console.warn('The method `getContent()` is deprecated, using `content` property instead.');\n  }\n  if (typeof this.cache['article-content'] !== 'undefined') {\n    return this.cache['article-content'];\n  }\n\n  var articleContent = helpers.grabArticle(this._document);\n  if (helpers.getInnerText(articleContent, false) === '') {\n    this._document.body.innerHTML = this.cache.body;\n    articleContent = helpers.grabArticle(this._document, true);\n    if (helpers.getInnerText(articleContent, false) === '') {\n      return this.cache['article-content'] = false;\n    }\n  }\n\n  return this.cache['article-content'] = articleContent.innerHTML;\n};\n\nReadability.prototype.getTitle = function(notDeprecated) {\n  if (!notDeprecated) {\n    console.warn('The method `getTitle()` is deprecated, using `title` property instead.');\n  }\n  if (typeof this.cache['article-title'] !== 'undefined') {\n    return this.cache['article-title'];\n  }\n\n  var title = this._document.title;\n  var betterTitle;\n  var commonSeparatingCharacters = [' | ', ' _ ', ' - ', '«', '»', '—'];\n\n  var self = this;\n  commonSeparatingCharacters.forEach(function(char) {\n    var tmpArray = title.split(char);\n    if (tmpArray.length > 1) {\n      if (betterTitle) return self.cache['article-title'] = title;\n      betterTitle = tmpArray[0].trim();\n    }\n  });\n\n  if (betterTitle && betterTitle.length > 10) {\n    return this.cache['article-title'] = betterTitle;\n  }\n\n  return this.cache['article-title'] = title;\n};\n\nReadability.prototype.getTextBody = function(notDeprecated) {\n  if (!notDeprecated) {\n    console.warn('The method `getTextBody()` is deprecated, using `textBody` property instead.');\n  }\n  if (typeof this.cache['article-text-body'] !== 'undefined') {\n    return this.cache['article-text-body'];\n  }\n\n  var articleContent = helpers.grabArticle(this._document);\n  var rootElement = articleContent.childNodes[0];\n  var textBody = '';\n  if (rootElement) {\n    var textElements = rootElement.childNodes;\n    for (var i = 0; i < textElements.length; i++) {\n      var el = textElements[i];\n      var text = helpers.getInnerText(el);\n      if (!text) continue;\n      textBody += text;\n      if ((i + 1) < textElements.length) textBody += '\\n';\n    }\n  }\n\n  return this.cache['article-text-body'] = textBody;\n}\n\nReadability.prototype.getDocument = function(notDeprecated) {\n  if (!notDeprecated) {\n    console.warn('The method `getDocument()` is deprecated, using `document` property instead.');\n  }\n  return this._document;\n};\n\nReadability.prototype.getHTML = function(notDeprecated) {\n  if (!notDeprecated) {\n    console.warn('The method `getHTML()` is deprecated, using `html` property instead.');\n  }\n  return this._document.getElementsByTagName('html')[0].innerHTML;\n};\n\nfunction _findHTMLCharset(htmlbuffer) {\n\n  var body = htmlbuffer.toString(\"ascii\"),\n    input, meta, charset;\n\n  if (meta = body.match(/<meta\\s+http-equiv=[\"']content-type[\"'][^>]*?>/i)) {\n    input = meta[0];\n  }\n\n  if (input) {\n    charset = input.match(/charset\\s?=\\s?([a-zA-Z\\-0-9]*);?/);\n    if (charset) {\n      charset = (charset[1] || \"\").trim().toLowerCase();\n    }\n  }\n\n  if (!charset && (meta = body.match(/<meta\\s+charset=[\"'](.*?)[\"']/i))) {\n    charset = (meta[1] || \"\").trim().toLowerCase();\n  }\n\n  return charset;\n}\n\nfunction _parseContentType(str) {\n  if (!str) {\n    return {};\n  }\n  var parts = str.split(\";\"),\n    mimeType = parts.shift(),\n    charset, chparts;\n\n  for (var i = 0, len = parts.length; i < len; i++) {\n    chparts = parts[i].split(\"=\");\n    if (chparts.length > 1) {\n      if (chparts[0].trim().toLowerCase() == \"charset\") {\n        charset = chparts[1];\n      }\n    }\n  }\n\n  return {\n    mimeType: (mimeType || \"\").trim().toLowerCase(),\n    charset: (charset || \"UTF-8\").trim().toLowerCase() // defaults to UTF-8\n  };\n}\n\nfunction read(html, options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n\n  var overrideEncoding = options.encoding,\n      preprocess = options.preprocess;\n\n  options.encoding = null;\n  delete options.preprocess;\n\n  var parsedURL = urllib.parse(html);\n  if (['http:', 'https:', 'unix:', 'ftp:', 'sftp:'].indexOf(parsedURL.protocol) === -1) {\n    jsdomParse(null, null, html);\n  } else {\n    request(html, options, function(err, res, buffer) {\n      if (err) {\n        return callback(err);\n      }\n\n      var content_type = _parseContentType(res.headers['content-type']);\n\n      if (content_type.mimeType == \"text/html\") {\n        content_type.charset = _findHTMLCharset(buffer) || content_type.charset;\n      }\n\n      content_type.charset = (overrideEncoding || content_type.charset || \"utf-8\").trim().toLowerCase();\n\n      if (!content_type.charset.match(/^utf-?8$/i)) {\n        buffer = encodinglib.convert(buffer, \"UTF-8\", content_type.charset);\n      }\n\n      buffer = buffer.toString();\n\n      if (preprocess) {\n        preprocess(buffer, res, content_type, function(err, buffer) {\n          if (err) return callback(err);\n          jsdomParse(null, res, buffer);\n        });\n      } else {\n        jsdomParse(null, res, buffer);\n      }\n    });\n  }\n\n  function jsdomParse(error, meta, body) {\n    if (error) {\n      return callback(error);\n    }\n\n    if (typeof body !== 'string') body = body.toString();\n    if (!body) return callback(new Error('Empty story body returned from URL'));\n    jsdom.env({\n      html: body,\n      done: function(errors, window) {\n        if (meta) {\n          window.document.originalURL = meta.request.uri.href;\n        } else {\n          window.document.originalURL = null;\n        }\n\n        if (errors) {\n          window.close();\n          return callback(errors);\n        }\n        if (!window.document.body) {\n          window.close();\n          return callback(new Error('No body tag was found.'));\n        }\n\n        try {\n          var readability = new Readability(window, options);\n\n          // add meta information to callback\n          callback(null, readability, meta);\n        } catch (ex) {\n          window.close();\n          return callback(ex);\n\n        }\n      }\n    });\n  }\n}\n\nmodule.exports = read;\nmodule.exports.read = function() {\n  console.warn('`readability.read` is deprecated. Just use `var read = require(\"node-readability\"); read(url...);`.');\n  return read.apply(this, arguments);\n};\n","/home/travis/build/npmtest/node-npmtest-node-readability/node_modules/node-readability/src/helpers.js":"var url = require(\"url\");\n\n// All of the regular expressions in use within readability.\nvar regexps = {\n  unlikelyCandidatesRe: /combx|modal|lightbox|comment|disqus|foot|header|menu|meta|nav|rss|shoutbox|sidebar|sponsor|social|teaserlist|time|tweet|twitter/i,\n  okMaybeItsACandidateRe: /and|article|body|column|main/i,\n  positiveRe: /article|body|content|entry|hentry|page|pagination|post|text/i,\n  negativeRe: /combx|comment|contact|foot|footer|footnote|link|media|meta|promo|related|scroll|shoutbox|sponsor|utility|tags|widget/i,\n  divToPElementsRe: /<(a|blockquote|dl|div|img|ol|p|pre|table|ul)/i,\n  replaceBrsRe: /(<br[^>]*>[ \\n\\r\\t]*){2,}/gi,\n  replaceFontsRe: /<(\\/?)font[^>]*>/gi,\n  trimRe: /^\\s+|\\s+$/g,\n  normalizeRe: /\\s{2,}/g,\n  killBreaksRe: /(<br\\s*\\/?>(\\s|&nbsp;?)*){1,}/g,\n  videoRe: /http:\\/\\/(www\\.)?(youtube|vimeo|youku|tudou|56|yinyuetai)\\.com/i\n};\n\nvar dbg;\nexports.debug = function(debug) {\n  dbg = (debug) ? console.log : function() {};\n};\n\nvar cleanRules = [];\n\nmodule.exports.setCleanRules = function(rules) {\n  cleanRules = rules;\n};\n\n/**\n * Prepare the HTML document for readability to scrape it.\n * This includes things like stripping javascript, CSS, and handling terrible markup.\n *\n * @return void\n **/\nvar prepDocument = module.exports.prepDocument = function(document) {\n  var frames = document.getElementsByTagName('frame');\n  if (frames.length > 0) {\n    var bestFrame = null;\n    var bestFrameSize = 0;\n\n    Array.prototype.slice.call(frames, 0).forEach(function(frame) {\n      var frameSize = frame.offsetWidth + frame.offsetHeight;\n      var canAccessFrame = false;\n      try {\n        frame.contentWindow.document.body;\n        canAccessFrame = true;\n      } catch (e) {}\n\n      if (canAccessFrame && frameSize > bestFrameSize) {\n        bestFrame = frame;\n        bestFrameSize = frameSize;\n      }\n    });\n\n    if (bestFrame) {\n      var newBody = document.createElement('body');\n      newBody.innerHTML = bestFrame.contentWindow.document.body.innerHTML;\n      newBody.style.overflow = 'scroll';\n      document.body = newBody;\n\n      var frameset = document.getElementsByTagName('frameset')[0];\n      if (frameset) {\n        frameset.parentNode.removeChild(frameset);\n      }\n    }\n  }\n\n  // turn all double br's into p's\n  // note, this is pretty costly as far as processing goes. Maybe optimize later.\n  // document.body.innerHTML = document.body.innerHTML.replace(regexps.replaceBrsRe, '</p><p>').replace(regexps.replaceFontsRe, '<$1span>');\n};\n\n/***\n * grabArticle - Using a variety of metrics (content score, classname, element types), find the content that is\n *               most likely to be the stuff a user wants to read. Then return it wrapped up in a div.\n *\n * @return Element\n **/\nvar grabArticle = module.exports.grabArticle = function(document, preserveUnlikelyCandidates) {\n  /**\n   * First, node prepping. Trash nodes that look cruddy (like ones with the class name \"comment\", etc), and turn divs\n   * into P tags where they have been used inappropriately (as in, where they contain no other block level elements.)\n   *\n   * Note: Assignment from index for performance. See http://www.peachpit.com/articles/article.aspx?p=31567&seqNum=5\n   * TODO: Shouldn't this be a reverse traversal?\n   **/\n  var nodes = document.getElementsByTagName('*');\n  for (var i = 0; i < nodes.length; ++i) {\n    var node = nodes[i];\n    // Remove unlikely candidates */\n    var continueFlag = false;\n    if (!preserveUnlikelyCandidates) {\n      var unlikelyMatchString = node.className + node.id;\n      if (unlikelyMatchString.search(regexps.unlikelyCandidatesRe) !== -1 && unlikelyMatchString.search(regexps.okMaybeItsACandidateRe) == -1 && node.tagName !== 'HTML' && node.tagName !== \"BODY\") {\n        dbg(\"Removing unlikely candidate - \" + unlikelyMatchString);\n        node.parentNode.removeChild(node);\n        continueFlag = true;\n      }\n    }\n\n    // Turn all divs that don't have children block level elements into p's\n    if (!continueFlag && node.tagName === 'DIV') {\n      if (node.innerHTML.search(regexps.divToPElementsRe) === -1) {\n        dbg(\"Altering div to p\");\n        var newNode = document.createElement('p');\n        newNode.innerHTML = node.innerHTML;\n        node.parentNode.replaceChild(newNode, node);\n      } else {\n        // EXPERIMENTAL\n        Array.prototype.slice.call(node.childNodes).forEach(function(childNode) {\n          if (childNode.nodeType == 3 /*TEXT_NODE*/ ) {\n            // use span instead of p. Need more tests.\n            dbg(\"replacing text node with a span tag with the same content.\");\n            var span = document.createElement('span');\n            span.innerHTML = childNode.nodeValue;\n            childNode.parentNode.replaceChild(span, childNode);\n          }\n        });\n      }\n    }\n  }\n\n  /**\n   * Loop through all paragraphs, and assign a score to them based on how content-y they look.\n   * Then add their score to their parent node.\n   *\n   * A score is determined by things like number of commas, class names, etc. Maybe eventually link density.\n   **/\n  var allParagraphs = document.getElementsByTagName(\"p\");\n  var candidates = [];\n\n  for (var i = 0; i < allParagraphs.length; ++i) {\n    var paragraph = allParagraphs[i];\n    var parentNode = paragraph.parentNode;\n    var grandParentNode = parentNode.parentNode;\n    var innerText = getInnerText(paragraph);\n\n    // If this paragraph is less than 25 characters, don't even count it.\n    if (innerText.length < 25) continue;\n\n    // Initialize readability data for the parent.\n    if (typeof parentNode.readability == 'undefined') {\n      initializeNode(parentNode);\n      candidates.push(parentNode);\n    }\n\n    // Initialize readability data for the grandparent.\n    if (typeof grandParentNode.readability == 'undefined') {\n      initializeNode(grandParentNode);\n      candidates.push(grandParentNode);\n    }\n\n    var contentScore = 0;\n\n    // Add a point for the paragraph itself as a base. */\n    ++contentScore;\n\n    // Add points for any commas within this paragraph */\n    contentScore += innerText.replace('，', ',').split(',').length;\n\n    // For every 100 characters in this paragraph, add another point. Up to 3 points. */\n    contentScore += Math.min(Math.floor(innerText.length / 100), 3);\n\n    // Add the score to the parent. The grandparent gets half. */\n    parentNode.readability.contentScore += contentScore;\n    grandParentNode.readability.contentScore += contentScore / 2;\n  }\n\n\n  /**\n   * After we've calculated scores, loop through all of the possible candidate nodes we found\n   * and find the one with the highest score.\n   **/\n  var topCandidate = null;\n  candidates.forEach(function(candidate) {\n    /**\n     * Scale the final candidates score based on link density. Good content should have a\n     * relatively small link density (5% or less) and be mostly unaffected by this operation.\n     **/\n    candidate.readability.contentScore = candidate.readability.contentScore * (1 - getLinkDensity(candidate));\n\n    dbg('Candidate: ' + candidate + \" (\" + candidate.className + \":\" + candidate.id + \") with score \" + candidate.readability.contentScore);\n\n    if (!topCandidate || candidate.readability.contentScore > topCandidate.readability.contentScore) topCandidate = candidate;\n  });\n\n  /**\n   * If we still have no top candidate, just use the body as a last resort.\n   * We also have to copy the body node so it is something we can modify.\n   **/\n  if (topCandidate === null || topCandidate.tagName === 'BODY') {\n    // With no top candidate, bail out if no body tag exists as last resort.\n    if (!document.body) {\n      return new Error('No body tag was found.');\n    }\n    topCandidate = document.createElement('DIV');\n    topCandidate.innerHTML = document.body.innerHTML;\n    document.body.innerHTML = '';\n    document.body.appendChild(topCandidate);\n    initializeNode(topCandidate);\n  }\n\n\n  /**\n   * Now that we have the top candidate, look through its siblings for content that might also be related.\n   * Things like preambles, content split by ads that we removed, etc.\n   **/\n  var articleContent = document.createElement('DIV');\n  articleContent.id = 'readability-content';\n  var siblingScoreThreshold = Math.max(10, topCandidate.readability.contentScore * 0.2);\n  var siblingNodes = topCandidate.parentNode.childNodes;\n  for (var i = 0, il = siblingNodes.length; i < il; i++) {\n    var siblingNode = siblingNodes[i];\n    var append = false;\n\n    dbg('Looking at sibling node: ' + siblingNode + ' (' + siblingNode.className + ':' + siblingNode.id + ')' + ((typeof siblingNode.readability != 'undefined') ? (' with score ' + siblingNode.readability.contentScore) : ''));\n    dbg('Sibling has score ' + (siblingNode.readability ? siblingNode.readability.contentScore : 'Unknown'));\n\n    if (siblingNode === topCandidate) {\n      append = true;\n    }\n\n    if (typeof siblingNode.readability != 'undefined' && siblingNode.readability.contentScore >= siblingScoreThreshold) {\n      append = true;\n    }\n\n    if (siblingNode.nodeName == 'P') {\n      var linkDensity = getLinkDensity(siblingNode);\n      var nodeContent = getInnerText(siblingNode);\n      var nodeLength = nodeContent.length;\n\n      if (nodeLength > 80 && linkDensity < 0.25) {\n        append = true;\n      } else if (nodeLength < 80 && linkDensity === 0 && nodeContent.search(/\\.( |$)/) !== -1) {\n        append = true;\n      }\n    }\n\n    if (append) {\n      dbg(\"Appending node: \" + siblingNode);\n\n      /* Append sibling and subtract from our list because it removes the node when you append to another node */\n      articleContent.appendChild(siblingNode);\n      i--;\n      il--;\n    }\n  }\n\n  /**\n   * So we have all of the content that we need. Now we clean it up for presentation.\n   **/\n  prepArticle(articleContent);\n\n  return articleContent;\n};\n\n/**\n * Remove the style attribute on every e and under.\n *\n * @param Element\n * @return void\n **/\nfunction cleanStyles(e) {\n  if (!e) return;\n\n\n  // Remove any root styles, if we're able.\n  if (typeof e.removeAttribute == 'function' && e.className != 'readability-styled') e.removeAttribute('style');\n\n  // Go until there are no more child nodes\n  var cur = e.firstChild;\n  while (cur) {\n    if (cur.nodeType == 1) {\n      // Remove style attribute(s) :\n      if (cur.className != \"readability-styled\") {\n        cur.removeAttribute(\"style\");\n      }\n      cleanStyles(cur);\n    }\n    cur = cur.nextSibling;\n  }\n}\n\n/**\n * Remove extraneous break tags from a node.\n *\n * @param Element\n * @return void\n **/\nfunction killBreaks(e) {\n  e.innerHTML = e.innerHTML.replace(regexps.killBreaksRe, '<br />');\n}\n\n\n/**\n * Get the inner text of a node - cross browser compatibly.\n * This also strips out any excess whitespace to be found.\n *\n * @param Element\n * @return string\n **/\ngetInnerText = exports.getInnerText = function(e, normalizeSpaces) {\n  var textContent = \"\";\n\n  normalizeSpaces = (typeof normalizeSpaces == 'undefined') ? true : normalizeSpaces;\n\n  textContent = e.textContent.trim();\n\n  if (normalizeSpaces) return textContent.replace(regexps.normalizeRe, \" \");\n  else return textContent;\n}\n\n/**\n * Get the number of times a string s appears in the node e.\n *\n * @param Element\n * @param string - what to split on. Default is \",\"\n * @return number (integer)\n **/\nfunction getCharCount(e, s) {\n  s = s || \",\";\n  return getInnerText(e).split(s).length;\n}\n\n/**\n * Get the density of links as a percentage of the content\n * This is the amount of text that is inside a link divided by the total text in the node.\n *\n * @param Element\n * @return number (float)\n **/\nfunction getLinkDensity(e) {\n  var links = e.getElementsByTagName(\"a\");\n\n  var textLength = getInnerText(e).length;\n  var linkLength = 0;\n  for (var i = 0, il = links.length; i < il; i++) {\n    var href = links[i].getAttribute('href');\n    // hack for <h2><a href=\"#menu\"></a></h2> / <h2><a></a></h2>\n    if (!href || (href.length > 0 && href[0] === '#')) continue;\n    linkLength += getInnerText(links[i]).length;\n  }\n  return linkLength / textLength;\n}\n\n/**\n * Get an elements class/id weight. Uses regular expressions to tell if this\n * element looks good or bad.\n *\n * @param Element\n * @return number (Integer)\n **/\nfunction getClassWeight(e) {\n  var weight = 0;\n\n  /* Look for a special classname */\n  if (e.className !== '') {\n    if (e.className.search(regexps.negativeRe) !== -1) weight -= 25;\n\n    if (e.className.search(regexps.positiveRe) !== -1) weight += 25;\n  }\n\n  /* Look for a special ID */\n  if (typeof(e.id) == 'string' && e.id != \"\") {\n    if (e.id.search(regexps.negativeRe) !== -1) weight -= 25;\n\n    if (e.id.search(regexps.positiveRe) !== -1) weight += 25;\n  }\n\n  return weight;\n}\n\n/**\n * Clean a node of all elements of type \"tag\".\n * (Unless it's a youtube/vimeo video. People love movies.)\n *\n * @param Element\n * @param string tag to clean\n * @return void\n **/\nfunction clean(e, tag) {\n  var targetList = e.getElementsByTagName(tag);\n  var isEmbed = (tag == 'object' || tag == 'embed');\n\n\n\n  for (var y = targetList.length - 1; y >= 0; y--) {\n    //------- user clean handler -----------------\n    var validRule = false;\n    for (var i = 0; i < cleanRules.length; i++) {\n      if (cleanRules[i](targetList[y], tag) === true) {\n        validRule = true;\n        break;\n      }\n    }\n\n    if (validRule) {\n      continue;\n    }\n    //------- end user clean handler -----------------\n\n    /* Allow youtube and vimeo videos through as people usually want to see those. */\n    if (isEmbed) {\n      if (targetList[y].innerHTML.search(regexps.videoRe) !== -1) {\n        continue;\n      }\n    }\n\n    targetList[y].parentNode.removeChild(targetList[y]);\n  }\n}\n\n/**\n * Clean an element of all tags of type \"tag\" if they look fishy.\n * \"Fishy\" is an algorithm based on content length, classnames, link density, number of images & embeds, etc.\n *\n * @return void\n **/\nfunction cleanConditionally(e, tag) {\n  var tagsList = e.getElementsByTagName(tag);\n  var curTagsLength = tagsList.length;\n\n  /**\n   * Gather counts for other typical elements embedded within.\n   * Traverse backwards so we can remove nodes at the same time without effecting the traversal.\n   *\n   * TODO: Consider taking into account original contentScore here.\n   **/\n  for (var i = curTagsLength - 1; i >= 0; i--) {\n    var weight = getClassWeight(tagsList[i]);\n\n    dbg(\"Cleaning Conditionally \" + tagsList[i] + \" (\" + tagsList[i].className + \":\" + tagsList[i].id + \")\" + ((typeof tagsList[i].readability != 'undefined') ? (\" with score \" + tagsList[i].readability.contentScore) : ''));\n\n    if (weight < 0) {\n      tagsList[i].parentNode.removeChild(tagsList[i]);\n    } else if (getCharCount(tagsList[i], ',') < 10) {\n      /**\n       * If there are not very many commas, and the number of\n       * non-paragraph elements is more than paragraphs or other ominous signs, remove the element.\n       **/\n\n      var p = tagsList[i].getElementsByTagName(\"p\").length;\n      var img = tagsList[i].getElementsByTagName(\"img\").length;\n      var li = tagsList[i].getElementsByTagName(\"li\").length - 100;\n      var input = tagsList[i].getElementsByTagName(\"input\").length;\n\n      var embedCount = 0;\n      var embeds = tagsList[i].getElementsByTagName(\"embed\");\n      for (var ei = 0, il = embeds.length; ei < il; ei++) {\n        if (embeds[ei].src && embeds[ei].src.search(regexps.videoRe) == -1) {\n          embedCount++;\n        }\n      }\n\n      var linkDensity = getLinkDensity(tagsList[i]);\n      var contentLength = getInnerText(tagsList[i]).length;\n      var toRemove = false;\n\n      if (img > p && img > 1) {\n        toRemove = true;\n      } else if (li > p && tag != \"ul\" && tag != \"ol\") {\n        toRemove = true;\n      } else if (input > Math.floor(p / 3)) {\n        toRemove = true;\n      } else if (contentLength < 25 && (img == 0 || img > 2)) {\n        toRemove = true;\n      } else if (weight < 25 && linkDensity > .2) {\n        toRemove = true;\n      } else if (weight >= 25 && linkDensity > .5) {\n        toRemove = true;\n      } else if ((embedCount == 1 && contentLength < 75) || embedCount > 1) {\n        toRemove = true;\n      }\n\n      if (toRemove) {\n        tagsList[i].parentNode.removeChild(tagsList[i]);\n      }\n    }\n  }\n}\n\n\n/**\n * Converts relative urls to absolute for images and links\n **/\nfunction fixLinks(e) {\n  if (!e.ownerDocument.originalURL) {\n    return;\n  }\n\n  function fixLink(link) {\n    var fixed = url.resolve(e.ownerDocument.originalURL, link);\n    return fixed;\n  }\n\n  var i;\n  var imgs = e.getElementsByTagName('img');\n  for (i = imgs.length - 1; i >= 0; --i) {\n    var src = imgs[i].getAttribute('src');\n    if (src) {\n      imgs[i].setAttribute('src', fixLink(src));\n    }\n  }\n\n  var as = e.getElementsByTagName('a');\n  for (i = as.length - 1; i >= 0; --i) {\n    var href = as[i].getAttribute('href');\n    if (href) {\n      as[i].setAttribute('href', fixLink(href));\n    }\n  }\n}\n\n/**\n * Clean out spurious headers from an Element. Checks things like classnames and link density.\n *\n * @param Element\n * @return void\n **/\nfunction cleanHeaders(e) {\n  for (var headerIndex = 1; headerIndex < 7; headerIndex++) {\n    var headers = e.getElementsByTagName('h' + headerIndex);\n    for (var i = headers.length - 1; i >= 0; --i) {\n      if (getClassWeight(headers[i]) < 0 || getLinkDensity(headers[i]) > 0.33) {\n        headers[i].parentNode.removeChild(headers[i]);\n      }\n    }\n  }\n}\n\n/**\n * Remove the header that doesn't have next sibling.\n *\n * @param Element\n * @return void\n **/\n\nfunction cleanSingleHeader(e) {\n  for (var headerIndex = 1; headerIndex < 7; headerIndex++) {\n    var headers = e.getElementsByTagName('h' + headerIndex);\n    for (var i = headers.length - 1; i >= 0; --i) {\n      if (headers[i].nextSibling === null) {\n        headers[i].parentNode.removeChild(headers[i]);\n      }\n    }\n  }\n\n}\n\nfunction prepArticle(articleContent) {\n  cleanStyles(articleContent);\n  killBreaks(articleContent);\n\n  /* Clean out junk from the article content */\n  clean(articleContent, 'form');\n  clean(articleContent, 'object');\n  if (articleContent.getElementsByTagName('h1').length === 1) {\n    clean(articleContent, 'h1');\n  }\n  /**\n   * If there is only one h2, they are probably using it\n   * as a header and not a subheader, so remove it since we already have a header.\n   ***/\n  if (articleContent.getElementsByTagName('h2').length === 1) clean(articleContent, \"h2\");\n\n  clean(articleContent, \"iframe\");\n\n  cleanHeaders(articleContent);\n\n  /* Do these last as the previous stuff may have removed junk that will affect these */\n  cleanConditionally(articleContent, \"table\");\n  cleanConditionally(articleContent, \"ul\");\n  cleanConditionally(articleContent, \"div\");\n\n  /* Remove extra paragraphs */\n  var articleParagraphs = articleContent.getElementsByTagName('p');\n  for (var i = articleParagraphs.length - 1; i >= 0; i--) {\n    var imgCount = articleParagraphs[i].getElementsByTagName('img').length;\n    var embedCount = articleParagraphs[i].getElementsByTagName('embed').length;\n    var objectCount = articleParagraphs[i].getElementsByTagName('object').length;\n\n    if (imgCount == 0 && embedCount == 0 && objectCount == 0 && getInnerText(articleParagraphs[i], false) == '') {\n      articleParagraphs[i].parentNode.removeChild(articleParagraphs[i]);\n    }\n  }\n\n  cleanSingleHeader(articleContent);\n\n  try {\n    articleContent.innerHTML = articleContent.innerHTML.replace(/<br[^>]*>\\s*<p/gi, '<p');\n  } catch (e) {\n    dbg(\"Cleaning innerHTML of breaks failed. This is an IE strict-block-elements bug. Ignoring.\");\n  }\n\n  fixLinks(articleContent);\n}\n\n/**\n * Initialize a node with the readability object. Also checks the\n * className/id for special names to add to its score.\n *\n * @param Element\n * @return void\n **/\nfunction initializeNode(node) {\n  node.readability = { contentScore: 0 };\n\n  switch (node.tagName) {\n    case 'ARTICLE':\n      node.readability.contentScore += 10;\n      break;\n\n    case 'SECTION':\n      node.readability.contentScore += 8;\n      break;\n\n    case 'DIV':\n      node.readability.contentScore += 5;\n      break;\n\n    case 'PRE':\n    case 'TD':\n    case 'BLOCKQUOTE':\n      node.readability.contentScore += 3;\n      break;\n\n    case 'ADDRESS':\n    case 'OL':\n    case 'UL':\n    case 'DL':\n    case 'DD':\n    case 'DT':\n    case 'LI':\n    case 'FORM':\n      node.readability.contentScore -= 3;\n      break;\n\n    case 'H1':\n    case 'H2':\n    case 'H3':\n    case 'H4':\n    case 'H5':\n    case 'H6':\n    case 'TH':\n      node.readability.contentScore -= 5;\n      break;\n  }\n\n  if (node.attributes.itemscope) {\n    node.readability.contentScore += 5;\n    if (node.attributes.itemtype &&\n        /blog|post|article/i.test(node.getAttribute('itemtype'))) {\n      node.readability.contentScore += 30;\n    }\n  }\n\n  node.readability.contentScore += getClassWeight(node);\n}\n","/home/travis/build/npmtest/node-npmtest-node-readability/node_modules/node-readability/src/cli.js":"#!/usr/bin/env iojs\nvar read = require(\"./readability.js\");\nvar argv = require(\"minimist\")(process.argv.slice(2));\n\nif(argv.h){\n  process.stdout.write(\n    \"luin readability\\n\" +\n    \"Usage: readability --url [URL] \" +\n    \"prints readability version of [URL].\\n\" +\n    \"Usage: readability             \" +\n    \"reads HTML from stdin and prints readable version to stdout.\\n\" +\n    \"Usage: readability -h          \" +\n    \"prints this help.\\n\"\n  );\n  return;\n}\n\nvar callback = function(err, article){\n  if(err)\n    console.error(err);\n  process.stdout.write(article.html);\n}\n\nif(typeof argv.url === 'string'){\n  read(argv.url, callback);\n} else {\n  var html;\n  process.stdin.on(\"data\", function(chunk){\n    html += chunk;\n  });\n  process.stdin.on(\"end\", function(){\n    read(html, callback);\n  });\n}\n"}